{
    "root": true,
    "plugins": ["prettier","import", "@typescript-eslint", "eslint-plugin-import"],
    "extends": [
        "airbnb-base",
        "airbnb-typescript/base",
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended-type-checked",
        "plugin:prettier/recommended",
        "plugin:import/recommended",
        "plugin:import/typescript",
        "prettier"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": "latest",
        "sourceType": "module",
        "project": ["./tsconfig.json"]
    },
    "env": {
        "browser": true,
        "es2022": true
    },
    "rules": {
        "prettier/prettier": ["error", { "endOfLine": "auto" }],
        "curly": ["error", "all"],
        "max-lines-per-function": ["error", 50],
        "@typescript-eslint/no-inferrable-types": "error",
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/explicit-member-accessibility": [
            "error",
            {
                "accessibility": "explicit",
                "overrides": {
                    "constructors": "off"
                }
            }
        ],
        "@typescript-eslint/consistent-type-assertions": ["error", { "assertionStyle": "never" }],
        "@typescript-eslint/explicit-function-return-type": "error",
        "@typescript-eslint/consistent-type-exports": "error",
        "@typescript-eslint/consistent-type-imports": "error",
        "sort-imports": [
            "error",
            {
                "ignoreCase": false,
                "ignoreDeclarationSort": true, // don"t want to sort import lines, use eslint-plugin-import instead
                "ignoreMemberSort": false,
                "memberSyntaxSortOrder": [
                    "none", "all", "multiple", "single"
                ],
                "allowSeparatedGroups": true
            }
        ],
        // turn on/off "prefer-default-export" errors
        "import/prefer-default-export" : "off",
        // turn on/off "import/extensions" errors
        "import/extensions": "off",
        // turn on/off errors for missing imports
        "import/no-unresolved": "error",
        "import/no-cycle": "error",
        // 'import/no-named-as-default-member': 'off',
        "no-plusplus": "off",
        "import/order": [
            "error",
            {
                "groups": [
                    "builtin", // Built-in imports (come from Node.js native) go first
                    "external", // <- External imports
                    "internal", // <- Absolute imports
                    [
                        "sibling", "parent"
                    ], // <- Relative imports, the sibling and parent types they can be mingled together
                    "index", // <- index imports
                    "unknown" // <- unknown
                ],
                "newlines-between": "always",
                "alphabetize": {
                    /* sort in ascending order. Options: ["ignore", "asc", "desc"] */
                    "order": "asc",
                    /* ignore case. Options: [true, false] */
                    "caseInsensitive": true
                }
            }
        ],
        "@typescript-eslint/no-unused-vars": [
            "warn", // or "error"
            {
                "argsIgnorePattern": "^_",
                "varsIgnorePattern": "^_",
                "caughtErrorsIgnorePattern": "^_"
            }
        ],
        "no-underscore-dangle": ["error", { "allowAfterThis": true }],
        "no-param-reassign": ["error", { "props": false }],
        "@typescript-eslint/unbound-method": ["off", {
            "ignoreStatic": true
        }]
    },
    "overrides": [
        {
            "files": ["*.js"],
            "extends": ["plugin:@typescript-eslint/disable-type-checked"]
        }
    ],
    "settings": {
        "import/resolver": {
            "typescript": {
                // always try to resolve types under `<root>@types` directory even it doesn't contain any source code, like `@types/unist`
                "alwaysTryTypes": true
            }
        },
        "import/parsers": {
            "@typescript-eslint/parser": [".ts", ".js"]
        }
    }
}
